/*
 * Copyright (C) 2014 University of Toronto, Computational Biology Lab.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301  USA
 */
package org.ut.biolab.medsavant.shared.model;

import java.io.Serializable;
import java.util.Date;

/**
 *
 * @author jim
 */
public class UserComment implements Serializable {

    public static final OntologyType ONTOLOGY_TYPE = OntologyType.HPO;
    
    private static final boolean DEFAULT_APPROVED_STATUS = false;
    private static final boolean DEFAULT_INCLUDED_STATUS = false;    
    private static final boolean DEFAULT_DELETED_STATUS = false;

    protected final Integer commentId;
    private final String user; //Ignored by server
    private final boolean isApproved; //Only used by server if user has permission
    private final boolean isIncluded;//Only used by server if user has permission    
    private final boolean isDeleted;//Only used by server if user has permission, or if user owns comment
    private final Date creationDate;//ignored by server
    private final Date modificationDate; //ignored by server.
    private final String commentText;
    private final OntologyTerm ontologyTerm;

    private UserComment parentComment;

    @Override
    public boolean equals(Object c) {

        if (c == null) {
            return false;
        }
        if (!(c instanceof UserComment)) {
            return false;
        }
        if (c.hashCode() != hashCode()) {
            return false;
        }

        UserComment uc = (UserComment) c;
        if (commentId != null && uc.getCommentID() != null) {
            return (commentId == uc.getCommentID());
        }

        return (user.equals(uc.getUser()))
                && commentText.equals(uc.commentText)
                && ontologyTerm.equals(uc.ontologyTerm);

    }

    //Generated by netbeans
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 97 * hash + (this.commentId != null ? this.commentId.hashCode() : 0);
        hash = 97 * hash + (this.user != null ? this.user.hashCode() : 0);
        hash = 97 * hash + (this.modificationDate != null ? this.modificationDate.hashCode() : 0);
        hash = 97 * hash + (this.commentText != null ? this.commentText.hashCode() : 0);
        hash = 97 * hash + (this.ontologyTerm != null ? this.ontologyTerm.hashCode() : 0);
        return hash;
    }

    public UserComment(UserComment parentComment, Boolean approveParent, Boolean includeParent, Boolean markParentDeleted, String comment) {
        //Parent comment contains the new status.
        //Status change comment tracks the original status of the parent comment.  
        this(parentComment.isApproved(),
                parentComment.isIncluded(),
                parentComment.isDeleted(),
                comment,
                parentComment.getOntologyTerm(),
                new UserComment(approveParent, includeParent, markParentDeleted, parentComment.getCommentText(), parentComment.getOntologyTerm()));
        this.parentComment = new UserComment(parentComment.getCommentID(), null, approveParent, includeParent, markParentDeleted, null, null, parentComment.getCommentText(), parentComment.getOntologyTerm(), null);

    }

    public UserComment(String comment, OntologyTerm ontologyTerm) {
        this(DEFAULT_APPROVED_STATUS, DEFAULT_INCLUDED_STATUS, DEFAULT_DELETED_STATUS, comment, ontologyTerm);
    }

    public UserComment(Boolean isApproved, Boolean isIncluded, Boolean isDeleted, String comment, OntologyTerm ontologyTerm) {
        this(null, null, isApproved, isIncluded, isDeleted, null, null, comment, ontologyTerm, null);
    }

    public UserComment(Boolean isApproved, Boolean isIncluded, Boolean isDeleted, String comment, OntologyTerm ontologyTerm, UserComment parentComment) {
        this(null, null, isApproved, isIncluded, isDeleted, null, null, comment, ontologyTerm, parentComment);
    }

    public UserComment(Integer commentId, String user, Boolean isApproved, Boolean isIncluded, Boolean isDeleted, Date creationDate, Date modificationDate, String commentText, OntologyTerm ontologyTerm, UserComment parentComment) {
        this.commentId = commentId;
        this.user = user;
        this.isApproved = isApproved;
        this.isIncluded = isIncluded;
        this.isDeleted = isDeleted;
        this.creationDate = creationDate;
        this.modificationDate = modificationDate;
        this.commentText = commentText;
        this.ontologyTerm = ontologyTerm;
        this.parentComment = parentComment;
    }

    public OntologyTerm getOntologyTerm() {
        return ontologyTerm;
    }

    public String getCommentText() {
        return commentText;
    }

    public String getUser() {
        return user;
    }

    public boolean isApproved() {
        return isApproved;
    }

    public boolean isIncluded() {
        return isIncluded;
    }

    public boolean isDeleted() {
        return isDeleted;
    }

    public Date getCreationDate() {
        return creationDate;
    }

    public Date getModificationDate() {
        return this.modificationDate;
    }

    public boolean statusChanged() {
        return parentComment != null
                && !(parentComment.isApproved() == isApproved()
                && parentComment.isDeleted() == isDeleted()
                && parentComment.isIncluded() == isIncluded());
    }

    public UserComment getOriginalComment() {
        return parentComment;
    }

    public Integer getCommentID() {
        return commentId;
    }

}
